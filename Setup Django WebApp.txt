Steps to setup Django web app
Reference:
*https://github.com/microsoft/python-sample-vscode-django-tutorial/tree/tutorial

Running Python application in a container
Reference:
*https://code.visualstudio.com/docs/containers/quickstart-python
*https://code.visualstudio.com/docs/containers/overview#_installation

Django settings 
References: 
*https://docs.djangoproject.com/en/2.1/topics/settings/#envvar-DJANGO_SETTINGS_MODULE
*https://github.com/MattSegal/django-deploy

___________________________________________________________________________________________________________________________________________________________________________
1) create a new project run:
___________________________________________________________________________________________________________________________________________________________________________

1a) run : django-admin startproject <projectname>

1b) Setup application to work with both prod and dev settings
___________________________________________________________________________________________________________________________________________________________________________

1b.1) create folder in manin app called settings
1b.2) create a python file (.py) named prod.py and dev.py
1b.3) rename settings.py to base.py
1b.4) paste this in prod.pyc

set DJANGO_SETTINGS_MODULE=mysite.settings.dev
set DJANGO_SETTINGS_MODULE=mysite.settings.prod

___________________________________________________________________________________________________________________________________________________________________________

2) Setup Environment
___________________________________________________________________________________________________________________________________________________________________________

2a) In VS Code Terminal, run `python -m venv env` to create a virtual environment as described in the tutorial.
2b) Press Ctrl + Shift + P and run command `Python: Select Interpreter`. If possible, select the interpreter ending with "('env': venv)"
2c) Activate the virtual environment by running `env/scripts/activate` if you are on Windows or run `source env/bin/activate` if you are on Linux/MacOS.
2d) In terminal, run `pip install django`.
2e) Create and initialize the database by running `python manage.py migrate`.
2f) From Run and Debug section, select `Python: Django` launch configuration and hit F5.

___________________________________________________________________________________________________________________________________________________________________________

3) Migrations References: https://simpleisbetterthancomplex.com/tutorial/2016/07/26/how-to-reset-migrations.html
___________________________________________________________________________________________________________________________________________________________________________

************************************************Scenario 1:************************************************
The project is still in the development environment and you want to perform a full clean up. You don’t mind throwing the whole database away.
1) Remove the all migrations files within your project
Go through each of your projects apps migration folder and remove everything inside, except the __init__.py file.
Or if you are using a unix-like OS you can run the following script (inside your project dir):
--find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
--find . -path "*/migrations/*.pyc"  -delete
2) Drop the current database, or delete the db.sqlite3 if it is your case.
3) Create the initial migrations and generate the database schema:
--python manage.py makemigrations
--python manage.py migrate
--python manage.py collectstatic

************************************************Scenario 2:************************************************
You want to clear all the migration history but you want to keep the existing database.

1) Make sure your models fits the current database schema
The easiest way to do it is trying to create new migrations:
--python manage.py makemigrations

If there are any pending migration, apply them first.
If you see the message:
--No changes detected
You are good to go.

2) Clear the migration history for each app
Now you will need to clear the migration history app by app.

First run the showmigrations command so we can keep track of what is going on:
--python manage.py showmigrations
Result:

admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
core
 [X] 0001_initial
 [X] 0002_remove_mymodel_i
 [X] 0003_mymodel_bio
sessions
 [X] 0001_initial

Clear the migration history (please note that core is the name of my app):
--python manage.py migrate --fake core zero
The result will be something like this:

Operations to perform:
  Unapply all migrations: core
Running migrations:
  Rendering model states... DONE
  Unapplying core.0003_mymodel_bio... FAKED
  Unapplying core.0002_remove_mymodel_i... FAKED
  Unapplying core.0001_initial... FAKED
  
Now run the command showmigrations again:
--python manage.py showmigrations
Result:

admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
core
 [ ] 0001_initial
 [ ] 0002_remove_mymodel_i
 [ ] 0003_mymodel_bio
sessions
 [X] 0001_initial
 
You must do that for all the apps you want to reset the migration history.

3) Remove the actual migration files.
Go through each of your projects apps migration folder and remove everything inside, except for the __init__.py file.

Or if you are using a unix-like OS you can run the following script (inside your project dir):

find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
find . -path "*/migrations/*.pyc"  -delete
PS: The example above will remove all the migrations file inside your project.

4) Run the showmigrations again:
--python manage.py showmigrations
Result:

admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
core
 (no migrations)
sessions
 [X] 0001_initial
 
5) Create the initial migrations
--python manage.py makemigrations
Result:

Migrations for 'core':
  0001_initial.py:
    - Create model MyModel
	
6) Fake the initial migration
In this case you won’t be able to apply the initial migration because the database table already exists. What we want to do is to fake this migration instead:
--python manage.py migrate --fake-initial
Result:

Operations to perform:
  Apply all migrations: admin, core, contenttypes, auth, sessions
Running migrations:
  Rendering model states... DONE
  Applying core.0001_initial... FAKED
  
7) Run showmigrations again:
--python manage.py showmigrations

admin
 [X] 0001_initial
 [X] 0002_logentry_remove_auto_add
auth
 [X] 0001_initial
 [X] 0002_alter_permission_name_max_length
 [X] 0003_alter_user_email_max_length
 [X] 0004_alter_user_username_opts
 [X] 0005_alter_user_last_login_null
 [X] 0006_require_contenttypes_0002
 [X] 0007_alter_validators_add_error_messages
contenttypes
 [X] 0001_initial
 [X] 0002_remove_content_type_name
core
 [X] 0001_initial
sessions
 [X] 0001_initial
And we are all set up :-)

___________________________________________________________________________________________________________________________________________________________________________
4) SuperUser Reference: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Admin_site
___________________________________________________________________________________________________________________________________________________________________________

4a) python manage.py createsuperuser
--Enter username
--Enter email
--Enter password
--Enter password again

___________________________________________________________________________________________________________________________________________________________________________
5) Whitenoise - used to render static files while in production and dev (for consistency)
*reference: http://whitenoise.evans.io/en/stable/
___________________________________________________________________________________________________________________________________________________________________________

5a) Add: whitenoise to requirements.txt
5b) run: pip install -r .\requirements.txt
5c) run: pip list -> to ensure its installed
5d) add: 'whitenoise.middleware.WhiteNoiseMiddleware', to the MIDDLEWARE property in the settings file
*IMPORTANT: add the above line after this line: 'django.middleware.security.SecurityMiddleware',
5e) add: 'whitenoise.runserver_nostatic', to INSTALLED_APPS property in the settings file
*IMPORTANT: add it as the first line
5f) add: STATIC_ROOT = os.path.join(BASE_DIR, 'static_collected') to prod settings file
5g) run: python manage.py collectstatic

___________________________________________________________________________________________________________________________________________________________________________
6)  httpie - used to test web api calls
*reference: 
https://www.django-rest-framework.org/tutorial/quickstart/
https://www.django-rest-framework.org/
___________________________________________________________________________________________________________________________________________________________________________

1) run - pip install djangorestframework
2) run - pip install httpie
3) run - http -a nalanzo2001:Saida1986$ http://127.0.0.1:8000/API/users/ - gets all users after logging in



GOOD TO KNOW:
*remove 1st line in manage.py file (#!/usr/bin/env python) in order for manage.py commands to work on windows